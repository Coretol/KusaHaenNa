name: build-and-release

on:
  push:
    paths-ignore:
      - ".github/ISSUE_TEMPLATE/"
      - "README.md"
    branches:
      - main
jobs:
  constants:
    runs-on: ubuntu-latest
    outputs:
      JAVA-VERSION: "11"
      NMS-VERSION: 1.16.5
    steps:
      - run: echo constant
  release:
    runs-on: ubuntu-latest
    needs: [ constants ]
    steps:
      - name: Checkout source
        uses: actions/checkout@v2
      - name: Setup JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: ${{ needs.constants.outputs.JAVA-VERSION }}
          java-package: jdk
      - name: cache NMS
        uses: actions/cache@v2
        id: cache-nms
        with:
          path: ~/.m2
          key: nms-${{ needs.constants.outputs.NMS-VERSION }}
          restore-keys: nms-${{ needs.constants.outputs.NMS-VERSION }}
      - name: build NMS
        if: steps.cache-nms.outputs.cache-hit != 'true'
        uses: derongan/nmsaction@v1
        with:
          rev: ${{ needs.constants.outputs.NMS-VERSION }}
      - name: Install nms into m2
        if: steps.cache-nms.outputs.cache-hit != 'true'
        run: mkdir -p ~/.m2/repository && cp -a nms-build/.m2/repository/. ~/.m2/repository
      - name: cache gradle
        uses: actions/cache@v2
        with:
          path: ~/.gradle
          key: gradle-${{ hashFiles('build.gradle') }}
          restore-keys: gradle-${{ hashFiles('build.gradle') }}
      - name: shadowJar
        run: ./gradlew shadowJar
      - name: Get file name
        id: get-filename
        run: echo ::set-output name=filename::$(ls -1 ./build/libs/)
      - name: Get version
        id: get-version
        uses: thecodemonkey/action-get-gradle-version@master
        with:
          file: build.gradle.kts
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get-version.outputs.version }}
          release_name: ${{ steps.get-version.outputs.version }} ${{ github.event.head_commit.message }}
          body: ""
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/libs/${{ steps.get-filename.outputs.filename }}
          asset_name: ${{ steps.get-filename.outputs.filename }}
          asset_content_type: application/zip
